Problema 1:

Reiniciar o serviço do sistema corporativo em 10 servidores.

Solução 1 - Criando o o reiniciaServicoSRV01.bat

Problema 2:

Esta solução baseada em batch opera em cima de arquivo texto. Não existe tratamento de objeto e seus estados.
É necessário saber quais as saídas e erros possíveis para os comandos envolvidos.

Verificando o status de um serviço com PS:
Windows PowerShell
Copyright (C) 2012 Microsoft Corporation. All rights reserved.

PS C:\Users\pedro> Get-Service -Name "ByteBank Interface Service" -ComputerName "SRV01"

Exemplo 2:
PS C:\Users\pedro> Get-Service -Name "AMD External Events Utility" -ComputerName "phantro"

Status   Name               DisplayName
------   ----               -----------
Running  AMD External Ev... AMD External Events Utility

$servico = Get-Service -Name "AMD External Events Utility" -ComputerName "phantro"

Como $serviço é uma variável que está armazenando um objeto podemos verificar os atributos dele:
PS C:\Users\pedro> $servico.Status
Running

Podemos criar um if para parar e subir o serviço:
PS C:\Users\pedro> if ($servico.Status -eq "Running") {
>> $servico.Stop()
>> $servico.Start()
>> } else {
>> echo "Servico nao estava executando"

Exercício:
==========
Algumas vezes podemos ter problemas com serviços providos pelo próprio sistema operacional, como o serviço de áudio - chamado AudioSrv.

Obtenha o serviço AudioSRV, pare-o e, em seguida, o inicie novamente - tente fazer isto enquanto ouve uma música pelo YouTube!

PS C:\Windows\system32> Get-Service -Name "AudioSrv" -ComputerName "phantro"

Status   Name               DisplayName
------   ----               -----------
Running  AudioSrv           Windows Audio


PS C:\Windows\system32> $servico=Get-Service -Name "AudioSrv" -ComputerName "phantro"
PS C:\Windows\system32>
PS C:\Windows\system32> $servico.Stop()
PS C:\Windows\system32> Get-Service -Name "AudioSrv" -ComputerName "phantro"

Status   Name               DisplayName
------   ----               -----------
Stopped  AudioSrv           Windows Audio


PS C:\Windows\system32> $servico.Start()
PS C:\Windows\system32> Get-Service -Name "AudioSrv" -ComputerName "phantro"

Status   Name               DisplayName
------   ----               -----------
Running  AudioSrv           Windows Audio


Verificando variáveis de ambiente através do PS:
PS C:\Windows\system32> echo $env:path

PS C:\Windows\system32> echo $env:Path.GetType()

IsPublic IsSerial Name                                     BaseType
-------- -------- ----                                     --------
True     True     String                                   System.Object

Usando o "Split" para melhorar a visualização do objento $env
PS C:\Windows\system32> echo $env:Path.Split(';')

C:\Windows\system32\WindowsPowerShell\v1.0\
C:\Program Files (x86)\Razer\ChromaBroadcast\bin
C:\Program Files\Razer\ChromaBroadcast\bin
C:\Program Files (x86)\Razer Chroma SDK\bin
C:\Program Files\Razer Chroma SDK\bin
C:\Program Files (x86)\Common Files\Oracle\Java\javapath
C:\ProgramData\Oracle\Java\javapath
C:\Windows\system32
C:\Windows
C:\Windows\System32\Wbem
C:\Windows\System32\WindowsPowerShell\v1.0\
C:\Program Files (x86)\ATI Technologies\ATI.ACE\Core-Static
C:\Program Files\Intel\WiFi\bin\
C:\Program Files\Common Files\Intel\WirelessCommon\
C:\Program Files (x86)\Calibre2\
C:\Program Files (x86)\Sennheiser\SoftphoneSDK\
C:\Program Files\Git\cmd
C:\HashiCorp\Vagrant\bin
C:\Windows\System32\WindowsPowerShell\v1.0\
C:\Windows\System32\WindowsPowerShell\v1.0\
C:\Program Files\Amazon\AWSCLIV2\
D:\terraform\
C:\Go\bin
C:\Users\pedro\AppData\Local\Programs\Microsoft VS Code\bin
C:\Program Files\Docker Toolbox
C:\Users\pedro\Desktop\HomeOffice\Kubernetes
C:\Users\pedro\go\bin

Usando o Get-Member para verificar todos os metodos e propriedades do objeto $env

PS C:\Windows\system32> echo $env:Path | Get-Member



   TypeName: System.String

Name             MemberType            Definition
----             ----------            ----------
Clone            Method                System.Object Clone(), System.Object ICloneable.Clone()
CompareTo        Method                int CompareTo(System.Object value), int CompareTo(string strB), int IComparab..
Contains         Method                bool Contains(string value)
CopyTo           Method                void CopyTo(int sourceIndex, char[] destination, int destinationIndex, int co..
EndsWith         Method                bool EndsWith(string value), bool EndsWith(string value, System.StringCompari..
Equals           Method                bool Equals(System.Object obj), bool Equals(string value), bool Equals(string..
GetEnumerator    Method                System.CharEnumerator GetEnumerator(), System.Collections.IEnumerator IEnumer..
GetHashCode      Method                int GetHashCode()
GetType          Method                type GetType()
GetTypeCode      Method                System.TypeCode GetTypeCode(), System.TypeCode IConvertible.GetTypeCode()
IndexOf          Method                int IndexOf(char value), int IndexOf(char value, int startIndex), int IndexOf..
IndexOfAny       Method                int IndexOfAny(char[] anyOf), int IndexOfAny(char[] anyOf, int startIndex), i..
Insert           Method                string Insert(int startIndex, string value)
IsNormalized     Method                bool IsNormalized(), bool IsNormalized(System.Text.NormalizationForm normaliz..
LastIndexOf      Method                int LastIndexOf(char value), int LastIndexOf(char value, int startIndex), int..
LastIndexOfAny   Method                int LastIndexOfAny(char[] anyOf), int LastIndexOfAny(char[] anyOf, int startI..
Normalize        Method                string Normalize(), string Normalize(System.Text.NormalizationForm normalizat..
PadLeft          Method                string PadLeft(int totalWidth), string PadLeft(int totalWidth, char paddingChar
PadRight         Method                string PadRight(int totalWidth), string PadRight(int totalWidth, char padding..
Remove           Method                string Remove(int startIndex, int count), string Remove(int startIndex)
Replace          Method                string Replace(char oldChar, char newChar), string Replace(string oldValue, s..
Split            Method                string[] Split(Params char[] separator), string[] Split(char[] separator, int..
StartsWith       Method                bool StartsWith(string value), bool StartsWith(string value, System.StringCom..
Substring        Method                string Substring(int startIndex), string Substring(int startIndex, int length)
ToBoolean        Method                bool IConvertible.ToBoolean(System.IFormatProvider provider)
ToByte           Method                byte IConvertible.ToByte(System.IFormatProvider provider)
ToChar           Method                char IConvertible.ToChar(System.IFormatProvider provider)
ToCharArray      Method                char[] ToCharArray(), char[] ToCharArray(int startIndex, int length)
ToDateTime       Method                datetime IConvertible.ToDateTime(System.IFormatProvider provider)
ToDecimal        Method                decimal IConvertible.ToDecimal(System.IFormatProvider provider)
ToDouble         Method                double IConvertible.ToDouble(System.IFormatProvider provider)
ToInt16          Method                int16 IConvertible.ToInt16(System.IFormatProvider provider)
ToInt32          Method                int IConvertible.ToInt32(System.IFormatProvider provider)
ToInt64          Method                long IConvertible.ToInt64(System.IFormatProvider provider)
ToLower          Method                string ToLower(), string ToLower(cultureinfo culture)
ToLowerInvariant Method                string ToLowerInvariant()
ToSByte          Method                sbyte IConvertible.ToSByte(System.IFormatProvider provider)
ToSingle         Method                float IConvertible.ToSingle(System.IFormatProvider provider)
ToString         Method                string ToString(), string ToString(System.IFormatProvider provider), string I..
ToType           Method                System.Object IConvertible.ToType(type conversionType, System.IFormatProvider..
ToUInt16         Method                uint16 IConvertible.ToUInt16(System.IFormatProvider provider)
ToUInt32         Method                uint32 IConvertible.ToUInt32(System.IFormatProvider provider)
ToUInt64         Method                uint64 IConvertible.ToUInt64(System.IFormatProvider provider)
ToUpper          Method                string ToUpper(), string ToUpper(cultureinfo culture)
ToUpperInvariant Method                string ToUpperInvariant()
Trim             Method                string Trim(Params char[] trimChars), string Trim()
TrimEnd          Method                string TrimEnd(Params char[] trimChars)
TrimStart        Method                string TrimStart(Params char[] trimChars)
Chars            ParameterizedProperty char Chars(int index) {get;}
Length           Property              int Length {get;}


Verificando apelidos:
PS C:\Windows\system32> Get-Alias



# Invocando um script .bat com o Command Precedence
.\reiniciaServicoSrv01.bat

# Imprimindo a variável de ambiente PATH na console
echo $env:path
# Também podemos simplesmente executar a expressão 
$env:path

# Como o PowerShell é orientado a objetos com .NET, podemos invocar o método GetType() em qualquer variável
$env:path.GetType()

# Podemos invocar o método Split da classe string na variável PATH!
$env:path.Split(';')

# Podemos usar o comando Get-Member para verificarmos as propriedades e os métodos dsponíveis no objeto
$env:path | Get-Member

# Conseguimos obter todos os apelidos de comandos (ALIAS) no PowerShell com o comando Get-Alias
Get-Alias

# Conseguimos obter todos os comandos no PowerShell com o comando Get-Command
Get-Command

# Com o argumento -Name, nós conseguimos filtrar os comandos que possuem rename no nome. (O asterisco atua como coringa para qualquer quantidade de caractere)
Get-Command -Name *rename*

# Obtendo ajuda do comando rename-item
Get-Help Name rename-item

# Com o SwitchArgument -WhatIf podemos saber o que o comando faria antes de executarmos-o
Rename-Item C:\Scripts\script.bat C:\Scripts\script_migrando.bat -WhatIf

# Sem o SwitchArgument, tudo funciona normalmente
Rename-Item C:\Scripts\script.bat C:\Scripts\script_migrando.bat 

# Atualizamos os tópicos de ajuda do PowerShell com o comando Update-Help
Update-Help

# Obtemos todos os scripts que atuam com Aliases, com o comando "Get-Command -noun alias"
Get-Command -noun alias

# O Get-Help retorna a ajuda ou a sintaxe de um comando, quando um documento de ajuda não estiver disponível
Get-Help new-alias

# Com new-alias podemos criar novos aliases
new-alias -Name="rename" rename-item

#Podemos verificar nosso alias criado com o comando abaixo
get-alias rename

#Alias feito, agora podemos executar!
rename C:\Scripts\script.bat C:\Scripts\script_migrando.bat 


Usando PROFILES no Power PowerShell
PS D:\scripts> New-Alias rename rename-item
PS D:\scripts>
PS D:\scripts>
PS D:\scripts> get-alias rename

CommandType     Name                                               ModuleName
-----------     ----                                               ----------
Alias           rename -> Rename-Item

Usando a variável $profile posso observar o perfil:

PS D:\scripts> $profile
C:\Users\pedro\Documents\WindowsPowerShell\Microsoft.PowerShell_profile.ps1

## Criando arquivo de profile
=============================
New-Item $PROFILE

ou

New-Item C:\Users\pedro\Documents\WindowsPowerShell\Microsoft.PowerShell_profile.ps1

Habilitando Política de Execução:
get-help about-execution_policies

Verificando a política de execução atual:
PS D:\scripts> Get-ExecutionPolicy
Restricted

Modificando a polícita:
PS D:\scripts> set-ExecutionPolicy unrestricted

Execution Policy Change
The execution policy helps protect you from scripts that you do not trust. Changing the execution policy might expose
you to the security risks described in the about_Execution_Policies help topic at
http://go.microsoft.com/fwlink/?LinkID=135170. Do you want to change the execution policy?
[Y] Yes  [N] No  [S] Suspend  [?] Help (default is "Y"): Y

Verificando como ficou:
PS D:\scripts> Get-ExecutionPolicy
Unrestricted


Verificando o perfil para vários usuários:
PS D:\scripts> $PROFILE.AllUsersAllHosts
C:\Windows\System32\WindowsPowerShell\v1.0\profile.ps1

Criando perfil para todos os usuários:
new-item $PROFILE.AllUsersAllHosts

Editar o "C:\Windows\System32\WindowsPowerShell\v1.0\profile.ps1" para configurar conforme desejado.

# Coringas também funcionam no comando Get-Help!
Get-Help about_*

Get-Help about_profiles

# Verificando o local onde deve ser armazenado o script de profile para todos os usuários e todos os hosts
$Profile.AllUsersAllHosts

New-Item $Profile.AllUsersAllHosts
notepad $Profile.AllUsersAllHosts



## Verificando arquivos e diretórios dentro de uma pasta espefica:
gci -Recurse

$todosOsItens = gci -Recurse
$todosOsItens.Length

## Verificando apenas os arquivos dentro de uma pasta específica:
$todosOsItens = gci -Recurse -File
$todosOsItens.Length


Exemplo:
PS D:\scripts> $todosOsItens = gci -Recurse
PS D:\scripts> $todosOsItens.Length
7
PS D:\scripts> $todosOsItens = gci -Recurse -File
PS D:\scripts> $todosOsItens.Length
6


Tarefa:
De todos os scripts nós queremos SELECIONAR
o nome dos scripts ONDE cada um destes scripts possui um nome 
PARECIDO com *_migrando_*

## $todosOsItens = gci -Recurse -File

#Variavel de iteracao = $_
gci -Recurse -File | Select-Object Name | Where-Object { $_  -like "*_migrando_*" }


EXEMPLO:

PS D:\scripts> gci -Recurse -File | Select-Object Name

Name
----
sha1.bat
sha1_migrando_pedro.bat
sha1.bat
sha1_migrando_pedro - Copy (2).bat
sha1_migrando_pedro - Copy.bat
sha1_migrando_pedro.bat


PS D:\scripts> gci -Recurse -File | Select-Object Name | Where-Object { $_  -like "*_migrando_*" }

Name
----
sha1_migrando_pedro.bat
sha1_migrando_pedro - Copy (2).bat
sha1_migrando_pedro - Copy.bat
sha1_migrando_pedro.bat



Melhorando a saída do comando:
gci -Recurse -File | Where-Object Name -like "*_migrando_*" | Select-Object Name, Length

PS D:\scripts> gci -Recurse -File | Where-Object Name -like "*_migrando_*" | Select-Object Name, Length

Name                                                                                                             Length
----                                                                                                             ------
sha1_migrando_pedro.bat                                                                                               0
sha1_migrando_pedro - Copy (2).bat                                                                                    0
sha1_migrando_pedro - Copy.bat                                                                                        0
sha1_migrando_pedro.bat                                                                                               0

FILTER LEFT, FORMAT RIGHT


Formatando a coluna Length:

gci -Recurse -File | Where-Object Name -like "*_migrando_*" | Select-Object Name, { "{0:N2}KB" -f ($_.Length / 1KB) } 

Saída:
PS D:\scripts> gci -Recurse -File | Where-Object Name -like "*_migrando_*" | Select-Object Name, { "{0:N2}KB" -f ($_.Len
gth / 1KB) }

Name                                                         "{0:N2}KB" -f ($_.Length / 1KB)
----                                                        ---------------------------------
sha1_migrando_pedro.bat                                     0,00KB
sha1_migrando_pedro - Copy (2).bat                          0,00KB
sha1_migrando_pedro - Copy.bat                              0,00KB
sha1_migrando_pedro.bat                                     0,00KB

Comentários do Professor:
# Com o Switch argument -File nós obtemos apenas os arquivos (sem os diretórios)
$todosOsArquivos = gci -Recurse -File
$todosOsArquivos.Length

# Filtro de arquivos parecidos com "*_migrando_*" FILTER LEFT, FORMAT RIGHT
gci -recurse -file | ? Name -like "*_migrando_*" | select Name, Length


# O PowerShell oferece suporte às unidades de medida de bytes
1KB
1MB
1GB
1TB

# Podemos fazer cálculos também
654654654 / 1GB

# Usando o format operator -f
 "{0:N2}MB = {1:N2}KB" -f (1gb / 1mb), (1gb / 1kb)

# Backticks para comandos com várias linhas!
gci -recurse -file |
	? Name -like "*_migrando_*" |
	select `
		Name, `
		{ "{0:N2}KB" -f ($_.Length / 1KB) }


Exercício:
Nesta atividade, de forma muito semelhante, vamos listar todos os arquivos de um diretório, recursivamente, que possuírem de uma extensão específica (como, por exemplo, [nome].exe). 
Nossa lista de saída deve possuir uma coluna de nome e tamanho!


$nameExpr = @{
    Label = "Nome";
    Expression = { $_.Name }
}

$lengthExpr = @{
    Label = "Tamanho";
    Expression = { "{0:N2}KB" -f ($_.Length / 1KB) }
}

$params = $nameExpr, $lengthExpr

gci -Recurse -File |
    ? Name -like "*.exe" |
    select $params

## Buscando variaveis de erro

Get-Variable | ? Name -like *error*

PS D:\scripts> Get-Variable | ? Name -like *error*

Name                           Value
----                           -----
Error                          {Cannot find path 'D:\curso\powershell\-' because it does not exist., The term '.\D:\.
ErrorActionPreference          Continue
ErrorView                      NormalView
MaximumErrorCount              256

## Buscando variaveis de preferencias

Get-Variable | ? Name -like *preference*
PS D:\scripts> Get-Variable | ? Name -like *preference*

Name                           Value
----                           -----
ConfirmPreference              High
DebugPreference                SilentlyContinue
ErrorActionPreference          Continue
ProgressPreference             Continue
VerbosePreference              SilentlyContinue
WarningPreference              Continue
WhatIfPreference               False


Excutando o novo script:
PS D:\scripts> cp D:\curso\powershell\ScriptsEmMigracao.ps1 .
PS D:\scripts> .\ScriptsEmMigracao.ps1

Nome                                                        Tamanho
----                                                        -------
sha1_migrando_pedro.bat                                     0,00KB
sha1_migrando_pedro - Copy (2).bat                          0,00KB
sha1_migrando_pedro - Copy.bat                              0,00KB
sha1_migrando_pedro.bat                                     0,00KB
