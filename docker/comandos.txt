Infraestrutura ágil com Docker e Kubernetes

Chegou a parte do famoso Docker! Você aprenderá a criar e gerenciar containers em forma de receitas e scripts, os fará a comunicarem entre si. 
As imagens Docker representam uma forma uniforme e leve de empacotar uma aplicação que não pode faltar nessa formação.

As ferramentas Kubernetes e Docker Swarm são orquestradores de containers para aumentar a disponibilidade e escalabilidade deles.


Docker Engine

Isso aí! Essa é a tecnologia mais famosa e responsável por fazer o meio de campo entre os containers e o SO.
Alternativa correta

Docker Hub

Isso aí! O Docker Hub provê um repositório com muitas aplicações para você usar em sua infraestrutura.
Alternativa correta

Docker Swarm

Isso aí! Essa tecnologia permite o uso de múltiplos docker hosts.


https://labs.play-with-docker.com/

COMANDOS Docker:

docker version - exibe a versão do docker.
docker run NOME_DA_IMAGEM - cria um container com a respectiva imagem passada como parâmetro. 

docker run ubuntu

docker ps

docker ps -a

docker run ubuntu echo "Ola Mundo"

docker run -it ubuntu

docker stop <id do container>



Para remover todos os containers existentes
docker container prune
root@dockerhost:~# docker run -d -P dockersamples/static-site
314f4ce805c63d91a5948f717c9f6d56d7be39cb45c4af9f208ef652a3251ca3
root@dockerhost:~# docker ps
CONTAINER ID        IMAGE                       COMMAND                  CREATED             STATUS              PORTS                                           NAMES
314f4ce805c6        dockersamples/static-site   "/bin/sh -c 'cd /usr…"   8 seconds ago       Up 6 seconds        0.0.0.0:32769->80/tcp, 0.0.0.0:32768->443/tcp   quirky_feistel

Outro exemplo:
root@dockerhost:~# docker container prune
WARNING! This will remove all stopped containers.
Are you sure you want to continue? [y/N] y
Deleted Containers:
314f4ce805c63d91a5948f717c9f6d56d7be39cb45c4af9f208ef652a3251ca3
d68ccf8929b75860f06decfec29db88d947756f4f9ec81ff783a82a279982a52
aa8107dc5637915b722303875e076b43c9914370f3f270ac92e6eea43f0fa282
1947df30fc45b524e1dc3653fc7bdf5c4ecbfba3de9903ff0aecdecd28badef8

Total reclaimed space: 26.25kB


Para saber quais portas estão sendo usadas por um container específico:
root@dockerhost:~# docker port 314f4ce805c6
443/tcp -> 0.0.0.0:32768
80/tcp -> 0.0.0.0:32769

Para passar um port-foward para o docker
root@dockerhost:~# docker run -d -p 12345:80 --name meu-site dockersamples/static-site
728775d41b875f09e47ff5b1c2e2d773c5a89dd236edb41e881d220363dd7a28
root@dockerhost:~# docker ps
CONTAINER ID        IMAGE                       COMMAND                  CREATED             STATUS              PORTS                            NAMES
728775d41b87        dockersamples/static-site   "/bin/sh -c 'cd /usr…"   5 seconds ago       Up 4 seconds        443/tcp, 0.0.0.0:12345->80/tcp   meu-site
root@dockerhost:~#


Para parar todos os containers que estão executando
root@dockerhost:~# docker stop -t0 $(docker ps -q)
eff3c7b1a4c3
5a525b6fc92c

Lista de comandos e resumo:
==============================
Segue também uma breve lista dos comandos utilizados:

    docker ps - exibe todos os containers em execução no momento.

    docker ps -a - exibe todos os containers, independentemente de estarem em execução ou não.

    docker run -it NOME_DA_IMAGEM - conecta o terminal que estamos utilizando com o do container.

    docker start ID_CONTAINER - inicia o container com id em questão.

    docker stop ID_CONTAINER - interrompe o container com id em questão.

    docker start -a -i ID_CONTAINER - inicia o container com id em questão e integra os terminais, além de permitir interação entre ambos.

    docker rm ID_CONTAINER - remove o container com id em questão.

    docker container prune - remove todos os containers que estão parados.

    docker rmi NOME_DA_IMAGEM - remove a imagem passada como parâmetro.

    docker run -d -P --name NOME dockersamples/static-site - ao executar, dá um nome ao container.

    docker run -d -p 12345:80 dockersamples/static-site - define uma porta específica para ser atribuída à porta 80 do container, neste caso 12345.

    docker run -d -P -e AUTHOR="Fulano" dockersamples/static-site - define uma variável de ambiente AUTHOR com o valor Fulano no container criado.
    
Salvando dados com volumes

    Comandos:
    docker run -v "[CAMINHO_VOLUME_LOCAL:]CAMINHO_VOLUME_CONTAINER" NOME_DA_IMAGEM - cria um volume no respectivo caminho do container, caso seja especificado um caminho local monta o volume local no volume do container.

    docker inspect ID_CONTAINER - retorna diversas informações sobre o container.

    docker run -v "/var/www" ubuntu

    docker inspect <id contaner>

    docker run -it -v "D:\curso\docker:/var/www" ubuntu
    
    docker run -it -v "/vagrant/html:/var/www" ubuntu

    docker run -it -v "C:\Users\Alura\Desktop:/var/www" ubuntu

Executando aplicação node localizada no D:\curso\docker\volume-exemplo

    docker run -p -d 8080:3000 -v "D:\curso\docker\volume-exemplo:/var/www" -w "/var/www" node npm start

    docker run -d -p 8080:3000 -v "/vagrant/volume-exemplo:/var/www" -w "/var/www" node npm start

    root@dockerhost:~# docker run -d -p 8080:3000 -v "/vagrant/volume-exemplo:/var/www" -w "/var/www" node npm start
    d97543a98cc3682f89cdc4fb9e68283e51157ae6cf263f64c10528c5ea21a803
    root@dockerhost:~# docker ps
    CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES
    d97543a98cc3        node                "docker-entrypoint.s…"   5 seconds ago       Up 4 seconds        0.0.0.0:8080->3000/tcp   stupefied_torvalds

    
Trabalhando com nossas imagens

    root@dockerhost:/vagrant# docker images
    REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
    ubuntu              latest              74435f89ab78        5 days ago          73.9MB
    centos              latest              831691599b88        5 days ago          215MB
    node                latest              dcda6cd5e439        12 days ago         942MB
    hello-world         latest              bf756fb1ae65        5 months ago        13.3kB


Building my image pedrop/node
    Docker build -f Dockerfile -t pedrop/node .

root@dockerhost:/vagrant/volume-exemplo# docker build -f Dockerfile -t pedrop/node .
Sending build context to Docker daemon  6.144kB
Step 1/7 : FROM node:latest
 ---> dcda6cd5e439
Step 2/7 : MAINTAINER Pedro Paiva
 ---> Using cache
 ---> b521335be770
Step 3/7 : COPY . /var/www/
 ---> 819b07f10ca6
Step 4/7 : WORKDIR = /var/www
 ---> Running in 9df245bf6c05
Removing intermediate container 9df245bf6c05
 ---> 6d7237aacada
Step 5/7 : RUN npm install
 ---> Running in 73256771fff5
npm WARN saveError ENOENT: no such file or directory, open '/= /var/www/package.json'
npm notice created a lockfile as package-lock.json. You should commit this file.
npm WARN enoent ENOENT: no such file or directory, open '/= /var/www/package.json'
npm WARN www No description
npm WARN www No repository field.
npm WARN www No README data
npm WARN www No license field.

up to date in 0.673s
found 0 vulnerabilities

Removing intermediate container 73256771fff5
 ---> 27042a2a0881
Step 6/7 : ENTRYPOINT npm start
 ---> Running in 3ec6f5240df4
Removing intermediate container 3ec6f5240df4
 ---> 918b314303fb
Step 7/7 : EXPOSE 3000
 ---> Running in a98b2f472eba
Removing intermediate container a98b2f472eba
 ---> 9ffc60e8445a
Successfully built 9ffc60e8445a
Successfully tagged pedrop/node:lates

root@dockerhost:/vagrant/volume-exemplo# docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
pedrop/node         latest              9ffc60e8445a        19 seconds ago      942MB
ubuntu              latest              74435f89ab78        5 days ago          73.9MB
centos              latest              831691599b88        5 days ago          215MB
node                latest              dcda6cd5e439        13 days ago         942MB
hello-world         latest              bf756fb1ae65        5 months ago        13.3kB

Executando minha imagem
root@dockerhost:/vagrant/volume-exemplo# docker run -d -p 8080:3000 pedrop/node
e6dce2e92023c9a4b87b4dae6ddf43e90a15ca55e98b8f02e2e3b25e803d9a67
root@dockerhost:/vagrant/volume-exemplo#





