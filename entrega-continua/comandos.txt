Aula 1 - O que é entrega contínua

Deployment Pipeline

	- Colaboração
	- Envolve várias áreas 
	- Aprendizagem contínua
	
Release Antipatterns

	- Gerenciamento manual de ambientes -> Deply não confiável
		- Todos os ambientes saão tratados como código
	
	- Deploy Manual -> Deploy lento, propício ao erro, não confiável
		- Escolher versao
		- Click one button deploy
		
	- Deploy apenas no fim do ciclo -> Pouca colaboração, problemas so aparecem no dia da publicação
	
	
Entrega contínua x Deploy contínuo

	Na entrega contínua as modificações e atualizações não são enviadas prontamente para produção. Aguarda algum evento de négocio para tal.
	Exemplo, algum evento de marketing; Treinamento de equipe, etc.
		
	O importante é que, na entrega contínua, as alterações não entrem em produção automaticamente, pois existe um motivo de negócio (marketing, por exemplo). 
	Tecnicamente, não existe nenhuma razão para reter alterações.
	
Aula 2 - Fundamentos
		
	Integração Contínua:

	Antes de começar com Entrega Contínua
	- Build automatizado
	- Testes contínuos
	- Gerenciamento de config
	
	
	Princípios:
	
	Entregar software com alta qualidade e grande valor de maneira eficiente, rápido e confiável.
	
		Automatize
		Versione
		Repita
		Garanta qualidade
		Defina "Done"
		Cria delivery team
		Use a melhoria contínua
		
	Elementos da Entrega Contínua
		
		Cultura DevOps
			- feedback, colaboração, confiança
			- melhoria e aprendizabem contínua
			
		Padrões
			- deployment pipeline
			- deploy patterns 
			
		Arquitetura
			
Aula 3 - Deployment Pipeline

	Etapas do pipeline:
	
		Build Unit Testes
		
		Testes de aceitação automatizados
		
		Homologação UAT
		
		Produção
		
	Vantagens de usar deployment pipeline:
	
		Entrega confiável: As etapas são testes do nosso sistema, começando com testes simples e rápidos, até chegar aos testes mais sofisticado.
		
		Feedback rápido: Cada etapa dá feedback para a equipe sobre a qualidade do software.
		
	Boas práticas:
	
		Pipeline deve ser a única forma de deploy
		
		Deve ser o máis rápido possível
		
		Build deve acontecer apenas uma vez
		
		Build deve ser independente do ambiente
		
		Ambientes iguais / semelhantes
		
		Ambientes efêmeros (temporários)
		
		Deploy para ambientes de maneira igual
		

		
		
		
	
	
	
	

	
	
	
	
		
		